{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport SectionHeader from '../../utils/SectionHeader';\nimport OverlapedImages from '../../utils/OverlapedImages';\nimport Section from '../../theme/Section';\nimport { withTranslation } from '../../i18n';\nvar useStyles = makeStyles(function () {\n  return {\n    root: {},\n    highlightedText: {\n      color: '#11c0c0'\n    }\n  };\n});\n\nvar WorkFlow = function WorkFlow(_ref, props) {\n  var t = _ref.t;\n\n  var className = props.className,\n      rest = _objectWithoutProperties(props, [\"className\"]);\n\n  var classes = useStyles();\n  return __jsx(Section, null, __jsx(\"div\", _extends({\n    className: clsx(classes.root, className)\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(SectionHeader, {\n    title: __jsx(\"span\", null, __jsx(\"span\", {\n      className: classes.highlightedText\n    }, ' ', t('header'), ' '), t('header2')),\n    subtitle: t('summary'),\n    align: \"left\",\n    fadeUp: true,\n    disableGutter: true\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(OverlapedImages, {\n    image1: {\n      src: '/assets/work.jpg',\n      alt: '...'\n    },\n    image2: {\n      src: '/assets/paper.jpg',\n      alt: '...'\n    },\n    image3: {\n      src: '/assets/startup.jpg',\n      alt: '...'\n    }\n  })))));\n};\n\nWorkFlow.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['workflow']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withTranslation('workflow')(WorkFlow);","map":null,"metadata":{},"sourceType":"module"}