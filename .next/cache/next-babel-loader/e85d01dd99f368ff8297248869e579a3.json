{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Slide from '@material-ui/core/Slide';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Link from '../Link';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport IconButton from '@material-ui/core/IconButton';\nimport ContactBarButton from '../components/ContactBarButton';\nimport { LinkScroll } from '../react-scroll';\nimport { withTranslation } from '../i18n';\n\nfunction HideOnScroll(props) {\n  const {\n    children\n  } = props;\n  const trigger = useScrollTrigger();\n  return __jsx(Slide, {\n    appear: false,\n    direction: \"down\",\n    in: !trigger\n  }, children);\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  toolbar: {\n    maxWidth: 1200,\n    width: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(0, 2)\n  },\n  toolbarMargin: _objectSpread(_objectSpread({}, theme.mixins.toolbar), {}, {\n    marginBottom: '3em'\n  }),\n  logo: {\n    marginLeft: '1rem',\n    maxWidth: '8rem'\n  },\n  logoContainer: {\n    padding: 0,\n    marginLeft: '1rem',\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  boxContainer: {\n    marginLeft: 'auto'\n  },\n  button: {\n    marginTop: '-20px',\n    fontFamily: 'Lato',\n    marginRight: '15px',\n    fontSize: '16px',\n    textTransform: 'none',\n    color: '#3D5865',\n    cursor: 'pointer',\n    fontWeight: '400',\n    minWidth: 5,\n    padding: '1rem',\n    '&:hover': {\n      backgroundColor: 'transparent',\n      textDecoration: 'none'\n    }\n  },\n  buttonContained: {\n    color: 'white',\n    marginLeft: '1rem',\n    marginRight: '1rem',\n    '&:hover': {\n      textDecoration: 'none'\n    }\n  },\n  containedMobile: {\n    justifyContent: 'center'\n  },\n  buttonContainedList: {\n    color: 'white'\n  },\n  buttonMenu: {\n    paddingBottom: '10px'\n  },\n  menu: {\n    marginLeft: '55px',\n    marginTop: '50px',\n    borderRadius: '10px'\n  },\n  icon: {\n    height: '28px',\n    width: '28px'\n  },\n  drawerIcon: {\n    marginLeft: 'auto',\n    height: '30px',\n    width: '30px'\n  },\n  searchMobile: {\n    margin: 'auto'\n  },\n  searchDesktop: {\n    margin: 'auto',\n    width: '340px'\n  },\n  drawerIconContainer: {\n    marginLeft: 'auto',\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  appbar: {\n    zIndex: theme.zIndex.modal + 1,\n    backgroundColor: 'white'\n  }\n}));\n\nconst Header = ({\n  t\n}, props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const iOS = false && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  const {\n    0: openDrawer,\n    1: setOpenDrawer\n  } = useState(false);\n  const matches = useMediaQuery(theme.breakpoints.down('md'));\n\n  const buttons = __jsx(React.Fragment, null, __jsx(Box, {\n    className: classes.boxContainer\n  }, __jsx(LinkScroll, {\n    className: classes.button,\n    activeClass: \"active\",\n    to: \"hero\",\n    spy: true,\n    smooth: true,\n    offset: 370,\n    duration: 500\n  }, t('button1')), __jsx(LinkScroll, {\n    className: classes.button,\n    activeClass: \"active\",\n    to: \"hero\",\n    spy: true,\n    smooth: true,\n    offset: 900,\n    duration: 500\n  }, t('button2'))), __jsx(ContactBarButton, null));\n\n  const drawer = __jsx(React.Fragment, null, __jsx(SwipeableDrawer, {\n    disableBackdropTransition: !iOS,\n    disableDiscovery: iOS,\n    open: openDrawer,\n    onClose: () => setOpenDrawer(false),\n    onOpen: () => setOpenDrawer(true)\n  }, __jsx(\"div\", {\n    className: classes.toolbarMargin\n  }), __jsx(List, {\n    disablePadding: true,\n    className: classes.buttonMenu\n  }, __jsx(ListItem, {\n    button: true,\n    component: Link,\n    href: \"/#\",\n    color: \"black\"\n  }, __jsx(LinkScroll, {\n    className: classes.button,\n    activeClass: \"active\",\n    to: \"hero\",\n    spy: true,\n    smooth: true,\n    offset: 270,\n    duration: 500\n  }, t('button1'))), __jsx(ListItem, {\n    button: true,\n    component: Link,\n    href: \"/#\",\n    color: \"black\"\n  }, __jsx(LinkScroll, {\n    className: classes.button,\n    activeClass: \"active\",\n    to: \"hero\",\n    spy: true,\n    smooth: true,\n    offset: 1200,\n    duration: 500\n  }, t('button2'))), __jsx(ContactBarButton, {\n    className: classes.containedMobile\n  }))), __jsx(IconButton, {\n    className: classes.drawerIconContainer,\n    onClick: () => setOpenDrawer(!openDrawer),\n    disableRipple: true\n  }, __jsx(MenuIcon, {\n    className: classes.drawerIcon\n  })));\n\n  return __jsx(React.Fragment, null, __jsx(HideOnScroll, null, __jsx(AppBar, {\n    position: \"fixed\",\n    className: classes.appbar\n  }, __jsx(Toolbar, {\n    className: classes.toolbar\n  }, __jsx(Button, {\n    component: Link,\n    href: \"/\",\n    className: classes.logoContainer\n  }, __jsx(\"img\", {\n    alt: \"Mind Monks\",\n    className: classes.logo,\n    src: \"/assets/kodeklub.svg\"\n  })), matches ? drawer : buttons))), __jsx(\"div\", {\n    className: classes.toolbarMargin\n  }));\n};\n\nHeader.getInitialProps = async () => ({\n  namespacesRequired: ['header']\n});\n\nexport default withTranslation('header')(Header);","map":null,"metadata":{},"sourceType":"module"}