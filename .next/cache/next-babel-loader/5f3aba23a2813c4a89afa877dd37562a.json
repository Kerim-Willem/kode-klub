{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Drawer, Button } from '@material-ui/core';\nimport ContactForm from '../ContactForm';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { withTranslation } from '../../i18n';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      height: '100%',\n      width: '100%'\n    },\n    buttonContained: {\n      color: 'white',\n      display: 'flex',\n      fontFamily: 'Lato',\n      fontWeight: '400'\n    },\n    contactForm: {\n      padding: theme.spacing(3, 2),\n      maxWidth: 800,\n      margin: '0 auto'\n    }\n  };\n});\n\nvar ContactBarButton = function ContactBarButton(_ref) {\n  var t = _ref.t;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      openBottombar = _React$useState2[0],\n      setOpenBottombar = _React$useState2[1];\n\n  var handleBottombarOpen = function handleBottombarOpen() {\n    setOpenBottombar(true);\n  };\n\n  var handleBottombarClose = function handleBottombarClose() {\n    setOpenBottombar(false);\n  };\n\n  return __jsx(\"div\", null, __jsx(Button, {\n    className: classes.buttonContained,\n    onClick: handleBottombarOpen,\n    size: \"large\",\n    variant: \"contained\",\n    color: \"secondary\"\n  }, t('contactbutton')), __jsx(Drawer, {\n    anchor: \"bottom\",\n    open: openBottombar,\n    onClose: handleBottombarClose\n  }, __jsx(\"div\", {\n    className: classes.contactForm\n  }, __jsx(ContactForm, null))));\n};\n\nContactBarButton.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['contactbutton']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default withTranslation('contactbutton')(ContactBarButton);","map":null,"metadata":{},"sourceType":"module"}