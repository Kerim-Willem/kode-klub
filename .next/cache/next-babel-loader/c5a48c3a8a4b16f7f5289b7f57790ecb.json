{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport SectionHeader from '../../utils/SectionHeader';\nimport OverlapedImages from '../../utils/OverlapedImages';\nimport Section from '../../theme/Section';\nimport { withTranslation } from '../../i18n';\nconst useStyles = makeStyles(() => ({\n  root: {},\n  highlightedText: {\n    color: '#11c0c0'\n  }\n}));\n\nconst WorkFlow = ({\n  t\n}, props) => {\n  const {\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const classes = useStyles();\n  return __jsx(Section, null, __jsx(\"div\", _extends({\n    className: clsx(classes.root, className)\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: 4\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(SectionHeader, {\n    title: __jsx(\"span\", null, __jsx(\"span\", {\n      className: classes.highlightedText\n    }, ' ', t('header'), ' '), t('header2')),\n    subtitle: t('summary'),\n    align: \"left\",\n    fadeUp: true,\n    disableGutter: true\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(OverlapedImages, {\n    image1: {\n      src: '/assets/work.jpg',\n      alt: '...'\n    },\n    image2: {\n      src: '/assets/paper.jpg',\n      alt: '...'\n    },\n    image3: {\n      src: '/assets/startup.jpg',\n      alt: '...'\n    }\n  })))));\n};\n\nWorkFlow.getInitialProps = async () => ({\n  namespacesRequired: ['workflow']\n});\n\nexport default withTranslation('workflow')(WorkFlow);","map":null,"metadata":{},"sourceType":"module"}