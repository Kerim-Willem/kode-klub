{"ast":null,"code":"var _jsxFileName = \"/Users/kerimfathallah/Desktop/kode-klub/src/components/WorkFlow/WorkFlow.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid } from '@material-ui/core';\nimport SectionHeader from '../../utils/SectionHeader';\nimport OverlapedImages from '../../utils/OverlapedImages';\nimport Section from '../../theme/Section';\nimport { withTranslation } from '../../i18n';\nconst useStyles = makeStyles(() => ({\n  root: {},\n  highlightedText: {\n    color: '#11c0c0'\n  }\n})); // const WorkFlow = (props) => {\n// \tconst { className, ...rest } = props;\n// \tconst classes = useStyles();\n// \treturn (\n// \t\t<Section>\n// \t\t\t<div className={clsx(classes.root, className)} {...rest}>\n// \t\t\t\t<Grid container spacing={4}>\n// \t\t\t\t\t<Grid item xs={12} sm={6}>\n// \t\t\t\t\t\t<SectionHeader\n// \t\t\t\t\t\t\ttitle={\n// \t\t\t\t\t\t\t\t<span>\n// \t\t\t\t\t\t\t\t\t<span className={classes.highlightedText}>\n// \t\t\t\t\t\t\t\t\t\t{' '}\n// \t\t\t\t\t\t\t\t\t\tOur Workflow{' '}\n// \t\t\t\t\t\t\t\t\t</span>\n// \t\t\t\t\t\t\t\t\texplained in detail\n// \t\t\t\t\t\t\t\t</span>\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\tsubtitle=\"Wij denken mee in elke fase van realisatie. Dat kan vanaf het prille idee of later in het ontwikkelingstraject. Bij ons gaat het om meer dan de technische implementatie. Ook de zakelijke of organisatorische context is belangrijk. Daarom staat bij de KodeKlub heldere communicatie hoog in het vaandel. \"\n// \t\t\t\t\t\t\talign=\"left\"\n// \t\t\t\t\t\t\tfadeUp\n// \t\t\t\t\t\t\tdisableGutter\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t</Grid>\n// \t\t\t\t\t<Grid item xs={12} sm={6}>\n// \t\t\t\t\t\t<OverlapedImages\n// \t\t\t\t\t\t\timage1={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/work.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\timage2={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/paper.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\timage3={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/startup.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t</Grid>\n// \t\t\t\t</Grid>\n// \t\t\t</div>\n// \t\t</Section>\n// \t);\n// };\n// WorkFlow.propTypes = {\n// \t/**\n// \t * External classes\n// \t */\n// \tclassName: PropTypes.string\n// };\n// export default WorkFlow;\n\nconst WorkFlow = ({\n  t\n}, props) => {\n  const {\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const classes = useStyles();\n  return __jsx(Section, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", _extends({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 6\n    }\n  }, __jsx(SectionHeader, {\n    title: __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(\"span\", {\n      className: classes.highlightedText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }\n    }, ' ', t('header'), ' '), t('header2')),\n    subtitle: t('summary'),\n    align: \"left\",\n    fadeUp: true,\n    disableGutter: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 6\n    }\n  }, __jsx(OverlapedImages, {\n    image1: {\n      src: '/assets/work.jpg',\n      alt: '...'\n    },\n    image2: {\n      src: '/assets/paper.jpg',\n      alt: '...'\n    },\n    image3: {\n      src: '/assets/startup.jpg',\n      alt: '...'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  })))));\n};\n\nWorkFlow.propTypes = {\n  /**\n   * External classes\n   */\n  className: PropTypes.string\n};\n\nWorkFlow.getInitialProps = async () => ({\n  namespacesRequired: ['workflow']\n});\n\nexport default withTranslation('workflow')(WorkFlow);","map":{"version":3,"sources":["/Users/kerimfathallah/Desktop/kode-klub/src/components/WorkFlow/WorkFlow.js"],"names":["React","PropTypes","clsx","makeStyles","Grid","SectionHeader","OverlapedImages","Section","withTranslation","useStyles","root","highlightedText","color","WorkFlow","t","props","className","rest","classes","src","alt","propTypes","string","getInitialProps","namespacesRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Grid } from '@material-ui/core';\nimport SectionHeader from '../../utils/SectionHeader';\nimport OverlapedImages from '../../utils/OverlapedImages';\nimport Section from '../../theme/Section';\n\nimport { withTranslation } from '../../i18n';\n\nconst useStyles = makeStyles(() => ({\n\troot: {},\n\thighlightedText: {\n\t\tcolor: '#11c0c0'\n\t}\n}));\n\n// const WorkFlow = (props) => {\n// \tconst { className, ...rest } = props;\n// \tconst classes = useStyles();\n\n// \treturn (\n// \t\t<Section>\n// \t\t\t<div className={clsx(classes.root, className)} {...rest}>\n// \t\t\t\t<Grid container spacing={4}>\n// \t\t\t\t\t<Grid item xs={12} sm={6}>\n// \t\t\t\t\t\t<SectionHeader\n// \t\t\t\t\t\t\ttitle={\n// \t\t\t\t\t\t\t\t<span>\n// \t\t\t\t\t\t\t\t\t<span className={classes.highlightedText}>\n// \t\t\t\t\t\t\t\t\t\t{' '}\n// \t\t\t\t\t\t\t\t\t\tOur Workflow{' '}\n// \t\t\t\t\t\t\t\t\t</span>\n// \t\t\t\t\t\t\t\t\texplained in detail\n// \t\t\t\t\t\t\t\t</span>\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\tsubtitle=\"Wij denken mee in elke fase van realisatie. Dat kan vanaf het prille idee of later in het ontwikkelingstraject. Bij ons gaat het om meer dan de technische implementatie. Ook de zakelijke of organisatorische context is belangrijk. Daarom staat bij de KodeKlub heldere communicatie hoog in het vaandel. \"\n// \t\t\t\t\t\t\talign=\"left\"\n// \t\t\t\t\t\t\tfadeUp\n// \t\t\t\t\t\t\tdisableGutter\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t</Grid>\n// \t\t\t\t\t<Grid item xs={12} sm={6}>\n// \t\t\t\t\t\t<OverlapedImages\n// \t\t\t\t\t\t\timage1={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/work.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\timage2={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/paper.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t\timage3={{\n// \t\t\t\t\t\t\t\tsrc: '/assets/startup.jpg',\n// \t\t\t\t\t\t\t\talt: '...'\n// \t\t\t\t\t\t\t}}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t</Grid>\n// \t\t\t\t</Grid>\n// \t\t\t</div>\n// \t\t</Section>\n// \t);\n// };\n\n// WorkFlow.propTypes = {\n// \t/**\n// \t * External classes\n// \t */\n// \tclassName: PropTypes.string\n// };\n\n// export default WorkFlow;\n\nconst WorkFlow = ({ t }, props) => {\n\tconst { className, ...rest } = props;\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<Section>\n\t\t\t<div className={clsx(classes.root, className)} {...rest}>\n\t\t\t\t<Grid container spacing={4}>\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<SectionHeader\n\t\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t<span className={classes.highlightedText}>\n\t\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t\t{t('header')}{' '}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{t('header2')}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsubtitle={t('summary')}\n\t\t\t\t\t\t\talign=\"left\"\n\t\t\t\t\t\t\tfadeUp\n\t\t\t\t\t\t\tdisableGutter\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid item xs={12} sm={6}>\n\t\t\t\t\t\t<OverlapedImages\n\t\t\t\t\t\t\timage1={{\n\t\t\t\t\t\t\t\tsrc: '/assets/work.jpg',\n\t\t\t\t\t\t\t\talt: '...'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\timage2={{\n\t\t\t\t\t\t\t\tsrc: '/assets/paper.jpg',\n\t\t\t\t\t\t\t\talt: '...'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\timage3={{\n\t\t\t\t\t\t\t\tsrc: '/assets/startup.jpg',\n\t\t\t\t\t\t\t\talt: '...'\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Grid>\n\t\t\t</div>\n\t\t</Section>\n\t);\n};\n\nWorkFlow.propTypes = {\n\t/**\n\t * External classes\n\t */\n\tclassName: PropTypes.string\n};\n\nWorkFlow.getInitialProps = async () => ({\n\tnamespacesRequired: ['workflow']\n});\n\nexport default withTranslation('workflow')(WorkFlow);\n"]},"metadata":{},"sourceType":"module"}